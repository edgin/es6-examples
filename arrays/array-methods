
Foreach

Foreach takes a callback function and run that callback function on each element of array one by one.
array.forEach(function(currentValue, index, arr), thisValue)

var sample = [1, 2, 3];
// es5
sample.forEach(function (elem, index,array){
   console.log(elem + ' comes at ' + index);
})
// es6
sample.forEach((elem, index) => `${elem} comes at ${index}`)
/*
output
1 comes at 0
2 comes at 1
3 comes at 2
*/

Filter 
array.filter(function(currentValue, index, arr), thisValue)

var sample = [1, 2, 3] // yeah same array
// es5
var result = sample.filter(function(elem){
    return elem !== 2;
})
console.log(result)
// es6
var result = sample.filter(elem => elem !== 2)
/* output */
[1, 3]

Map

array.map(function(currentValue, index, arr), thisValue)

var sample = [1, 2, 3] // i am never gonna change Boo! Yeah
// es5
var mapped = sample.map(function(elem) {
    return elem * 10;
})
// es6
let mapped = sample.map(elem => elem * 10)
console.log(mapped);
/* output */
[10, 20, 30]

Reduce 
array.reduce(function(total, currentValue, currentIndex, arr), initialValue)

example #1 

var sample = [1, 2, 3] // here we meet again
// es5
var sum = sample.reduce(function(sum, elem){
    return sum + elem;
})
// es6
var sum = sample.reduce((sum, elem) => sum + elem)
console.log(sum)

example #2 

var orders = [
  { amount: 250},
  { amount: 330},
  { amount: 450},
  { amount: 560},
  { amount: 670}
]

// var totalAmount = orders.reduce(function(sum, order){
//            console.log('hello', sum, order)
//            return sum + order.amount
//            },0);

var totalAmount = orders.reduce((sum, order) => sum + order.amount, 0)

console.log(totalAmount);

example #3 

const euros = [29.76, 41.85, 46.5];
const sum = euros.reduce((total, amount) => total + amount); 
console.log(sum)

